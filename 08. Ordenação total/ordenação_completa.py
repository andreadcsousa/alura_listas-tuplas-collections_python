# -*- coding: utf-8 -*-
"""Ordenação completa

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10U3vWxmNzSDdCdXmiPsNSwTl0ZPU3UAL
"""

from functools import total_ordering
from operator import attrgetter


class ContaSalario:

    def __init__(self, codigo):
        self._codigo = codigo
        self._saldo = 0

    def __eq__(self, outro):
        if type(outro) != ContaSalario:
            return False
        return self._codigo == outro._codigo and self._saldo == outro._saldo

    def __lt__(self, outro):
        return self._saldo < outro._saldo

    def deposita(self, valor):
        self._saldo += valor

    def __str__(self):
        return "[>> Código {} Saldo {} <<]".format(self._codigo, self._saldo)


conta_andrea = ContaSalario(19)
conta_andrea.deposita(500)

conta_eloisa = ContaSalario(17)
conta_eloisa.deposita(1000)

conta_neuza = ContaSalario(18)
conta_neuza.deposita(500)

contas = [conta_andrea, conta_eloisa, conta_neuza]


for conta in sorted(contas, key=attrgetter("_saldo", "_codigo")):
    print(conta)

conta_andrea = ContaSalario(19)
conta_andrea.deposita(500)

conta_eloisa = ContaSalario(17)
conta_eloisa.deposita(500)

conta_neuza = ContaSalario(18)
conta_neuza.deposita(500)

contas = [conta_andrea, conta_eloisa, conta_neuza]

for conta in sorted(contas, key=attrgetter("_saldo", "_codigo")):
    print(conta)


class ContaSalario:

    def __init__(self, codigo):
        self._codigo = codigo
        self._saldo = 0

    def __eq__(self, outro):
        if type(outro) != ContaSalario:
            return False
        return self._codigo == outro._codigo and self._saldo == outro._saldo

    def __lt__(self, outro):
        if self._saldo != outro._saldo:
            return self._saldo < outro._saldo
        return self._codigo < outro._codigo

    def deposita(self, valor):
        self._saldo += valor

    def __str__(self):
        return "[>> Código {} Saldo {} <<]".format(self._codigo, self._saldo)


conta_andrea = ContaSalario(19)
conta_andrea.deposita(500)

conta_eloisa = ContaSalario(17)
conta_eloisa.deposita(500)

conta_neuza = ContaSalario(18)
conta_neuza.deposita(500)

contas = [conta_andrea, conta_eloisa, conta_neuza]

for conta in sorted(contas):
    print(conta)

conta_andrea = ContaSalario(19)
conta_andrea.deposita(500)

conta_eloisa = ContaSalario(17)
conta_eloisa.deposita(1000)

conta_neuza = ContaSalario(18)
conta_neuza.deposita(500)

contas = [conta_andrea, conta_eloisa, conta_neuza]

for conta in sorted(contas):
    print(conta)

conta_andrea < conta_eloisa


@total_ordering
class ContaSalario:

    def __init__(self, codigo):
        self._codigo = codigo
        self._saldo = 0

    def __eq__(self, outro):
        if type(outro) != ContaSalario:
            return False
        return self._codigo == outro._codigo and self._saldo == outro._saldo

    def __lt__(self, outro):
        if self._saldo != outro._saldo:
            return self._saldo < outro._saldo
        return self._codigo < outro._codigo

    def deposita(self, valor):
        self._saldo += valor

    def __str__(self):
        return "[>> Código {} Saldo {} <<]".format(self._codigo, self._saldo)


conta_andrea = ContaSalario(19)
conta_andrea.deposita(500)

conta_eloisa = ContaSalario(17)
conta_eloisa.deposita(1000)

conta_neuza = ContaSalario(18)
conta_neuza.deposita(500)

contas = [conta_andrea, conta_eloisa, conta_neuza]

conta_andrea <= conta_eloisa

conta_andrea < conta_eloisa

conta_andrea == conta_andrea

conta_andrea <= conta_neuza

conta_andrea <= conta_andrea
